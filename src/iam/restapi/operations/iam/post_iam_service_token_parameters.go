// Code generated by go-swagger; DO NOT EDIT.

package iam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostIamServiceTokenParams creates a new PostIamServiceTokenParams object
// no default values defined in spec.
func NewPostIamServiceTokenParams() PostIamServiceTokenParams {

	return PostIamServiceTokenParams{}
}

// PostIamServiceTokenParams contains all the bound params for the post iam service token operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostIamServiceToken
type PostIamServiceTokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*the jwt token from service (self-signed) or from idp (federated IAMs).
	  Max Length: 4000
	  In: formData
	*/
	Assertion *string
	/*the service provider audience uri.
	  Max Length: 1000
	  In: formData
	*/
	Audience *string
	/*the service provider domain name.
	  Max Length: 1000
	  In: formData
	*/
	Domain *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostIamServiceTokenParams() beforehand.
func (o *PostIamServiceTokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAssertion, fdhkAssertion, _ := fds.GetOK("assertion")
	if err := o.bindAssertion(fdAssertion, fdhkAssertion, route.Formats); err != nil {
		res = append(res, err)
	}

	fdAudience, fdhkAudience, _ := fds.GetOK("audience")
	if err := o.bindAudience(fdAudience, fdhkAudience, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDomain, fdhkDomain, _ := fds.GetOK("domain")
	if err := o.bindDomain(fdDomain, fdhkDomain, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAssertion binds and validates parameter Assertion from formData.
func (o *PostIamServiceTokenParams) bindAssertion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Assertion = &raw

	if err := o.validateAssertion(formats); err != nil {
		return err
	}

	return nil
}

// validateAssertion carries on validations for parameter Assertion
func (o *PostIamServiceTokenParams) validateAssertion(formats strfmt.Registry) error {

	if err := validate.MaxLength("assertion", "formData", (*o.Assertion), 4000); err != nil {
		return err
	}

	return nil
}

// bindAudience binds and validates parameter Audience from formData.
func (o *PostIamServiceTokenParams) bindAudience(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Audience = &raw

	if err := o.validateAudience(formats); err != nil {
		return err
	}

	return nil
}

// validateAudience carries on validations for parameter Audience
func (o *PostIamServiceTokenParams) validateAudience(formats strfmt.Registry) error {

	if err := validate.MaxLength("audience", "formData", (*o.Audience), 1000); err != nil {
		return err
	}

	return nil
}

// bindDomain binds and validates parameter Domain from formData.
func (o *PostIamServiceTokenParams) bindDomain(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Domain = &raw

	if err := o.validateDomain(formats); err != nil {
		return err
	}

	return nil
}

// validateDomain carries on validations for parameter Domain
func (o *PostIamServiceTokenParams) validateDomain(formats strfmt.Registry) error {

	if err := validate.MaxLength("domain", "formData", (*o.Domain), 1000); err != nil {
		return err
	}

	return nil
}
